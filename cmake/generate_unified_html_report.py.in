#!/usr/bin/env python3
"""
Unified Test Report HTML Generator
Converts multiple JSON test results to a comprehensive HTML report
"""

import json
import os
import datetime
import glob
import re
from pathlib import Path

# CMake configured variables
TEST_REPORTS_DIR = "@TEST_REPORTS_DIR@"
PROJECT_NAME = "@PROJECT_NAME@"
PROJECT_VERSION = "@REPORT_PROJECT_VERSION@"

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name} 综合测试报告 - v{version}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.5;
            color: #2d3748;
            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
            height: 100vh;
            overflow: hidden;
            font-size: 15px;
        }}
        
        .header {{
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 50%, #2b77cb 100%);
            color: white;
            padding: 16px 24px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        
        .header-left {{
            flex: 1;
        }}
        
        .header h1 {{
            font-size: 1.75em;
            margin: 0;
            font-weight: 600;
        }}
        
        .header-right {{
            text-align: right;
            font-size: 0.9em;
            opacity: 0.85;
            line-height: 1.4;
        }}
        
        .version-info {{
            margin-bottom: 2px;
        }}
        
        .timestamp-info {{
            font-size: 0.85em;
            opacity: 0.75;
        }}
        
        .main-container {{
            display: flex;
            height: 100vh;
            padding-top: 80px;
        }}
        
        .sidebar {{
            width: 340px;
            background: white;
            border-right: 1px solid #e2e8f0;
            overflow-y: auto;
            box-shadow: 4px 0 12px rgba(0,0,0,0.05);
        }}
        
        .content {{
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f7fafc;
        }}
        
        .summary {{
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            padding: 20px;
            background: white;
            margin-bottom: 0;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        }}
        
        .summary-card {{
            text-align: center;
            padding: 16px;
            border-radius: 6px;
            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
            border: 1px solid #e2e8f0;
        }}
        
        .summary-card h3 {{
            color: #718096;
            font-size: 0.8em;
            text-transform: uppercase;
            margin-bottom: 8px;
            font-weight: 600;
            letter-spacing: 0.5px;
        }}
        
        .summary-card .value {{
            font-size: 2em;
            font-weight: 700;
            margin-bottom: 4px;
        }}
        
        .summary-card .label {{
            color: #a0aec0;
            font-size: 0.8em;
        }}
        
        .passed {{ color: #38a169; }}
        .failed {{ color: #e53e3e; }}
        .warning {{ color: #d69e2e; }}
        
        .suite-list {{
            padding: 0;
            border-top: 1px solid #e2e8f0;
        }}
        
        .suite-item {{
            padding: 16px 20px;
            border-bottom: 1px solid #f1f5f9;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }}
        
        .suite-item:hover {{
            background: #f7fafc;
            transform: translateX(2px);
        }}
        
        .suite-item.active {{
            background: linear-gradient(135deg, #ebf8ff 0%, #e6fffa 100%);
            border-left: 3px solid #4299e1;
            transform: translateX(0);
        }}
        
        .suite-name {{
            font-weight: 600;
            margin-bottom: 6px;
            color: #2d3748;
            font-size: 1em;
        }}
        
        .suite-summary {{
            font-size: 0.85em;
            color: #718096;
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }}
        
        .suite-badge {{
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
            white-space: nowrap;
        }}
        
        .badge-passed {{
            background: #c6f6d5;
            color: #22543d;
        }}
        
        .badge-failed {{
            background: #fed7d7;
            color: #742a2a;
        }}
        
        .test-detail {{
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            overflow: hidden;
        }}
        
        .detail-header {{
            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
            padding: 20px 24px;
            border-bottom: 1px solid #e2e8f0;
        }}
        
        .detail-header h2 {{
            margin-bottom: 10px;
            color: #2d3748;
            font-size: 1.4em;
            font-weight: 600;
        }}
        
        .detail-stats {{
            display: flex;
            gap: 20px;
            font-size: 0.9em;
            color: #718096;
            flex-wrap: wrap;
        }}
        
        .test-cases {{
            max-height: calc(100vh - 240px);
            overflow-y: auto;
        }}
        
        .test-case {{
            border-bottom: 1px solid #f1f5f9;
            padding: 16px 24px;
            transition: background 0.2s ease;
        }}
        
        .test-case:hover {{
            background: #f7fafc;
        }}
        
        .test-case.passed {{
            border-left: 4px solid #38a169;
        }}
        
        .test-case.failed {{
            border-left: 4px solid #e53e3e;
        }}
        
        .test-name {{
            font-weight: 600;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1em;
        }}
        
        .test-name.passed {{ color: #22543d; }}
        .test-name.failed {{ color: #742a2a; }}
        
        .status-icon {{
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            font-weight: bold;
            color: white;
        }}
        
        .status-icon.passed {{
            background: #38a169;
        }}
        
        .status-icon.failed {{
            background: #e53e3e;
        }}
        
        .test-info {{
            display: flex;
            gap: 15px;
            font-size: 0.85em;
            color: #718096;
            margin-bottom: 6px;
            flex-wrap: wrap;
        }}
        
        .test-info span {{
            background: #f7fafc;
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid #e2e8f0;
        }}
        
        .error-details {{
            background: #fef5e7;
            border: 1px solid #feb2b2;
            color: #742a2a;
            padding: 12px 16px;
            border-radius: 6px;
            margin-top: 10px;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
            font-size: 0.8em;
            white-space: pre-wrap;
            max-height: 200px;
            overflow-y: auto;
        }}
        
        .progress-bar {{
            width: 100%;
            height: 4px;
            background: #e2e8f0;
            border-radius: 2px;
            overflow: hidden;
            margin-top: 6px;
        }}
        
        .progress-fill {{
            height: 100%;
            background: linear-gradient(90deg, #38a169, #48bb78);
            transition: width 0.3s ease;
        }}
        
        .welcome-message {{
            text-align: center;
            padding: 40px 20px;
            color: #718096;
        }}
        
        .welcome-message h3 {{
            margin-bottom: 8px;
            color: #4a5568;
            font-weight: 600;
        }}
        
        .filter-controls {{
            padding: 16px 20px;
            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
            border-bottom: 1px solid #e2e8f0;
        }}
        
        .filter-button {{
            display: inline-block;
            padding: 6px 12px;
            margin: 3px;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            font-size: 0.85em;
            cursor: pointer;
            transition: all 0.2s ease;
            background: white;
            font-weight: 500;
        }}
        
        .filter-button:hover {{
            background: #ebf8ff;
            border-color: #4299e1;
            transform: translateY(-1px);
        }}
        
        .filter-button.active {{
            background: #4299e1;
            color: white;
            border-color: #4299e1;
            box-shadow: 0 2px 4px rgba(66, 153, 225, 0.3);
        }}
        
        .search-box {{
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.9em;
            margin-bottom: 10px;
            transition: border-color 0.2s ease;
        }}
        
        .search-box:focus {{
            outline: none;
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
        }}
        
        @media (max-width: 768px) {{
            .main-container {{
                flex-direction: column;
            }}
            
            .sidebar {{
                width: 100%;
                height: 35vh;
            }}
            
            .content {{
                height: 65vh;
            }}
            
            .summary {{
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
                padding: 12px;
            }}
            
            .summary-card {{
                padding: 10px;
            }}
            
            .summary-card .value {{
                font-size: 1.4em;
            }}
            
            .header {{
                padding: 12px 20px;
                flex-direction: column;
                align-items: flex-start;
            }}
            
            .header-right {{
                text-align: left;
                margin-top: 8px;
            }}
            
            .header h1 {{
                font-size: 1.3em;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <div class="header-left">
            <h1>{project_name} 综合测试报告</h1>
        </div>
        <div class="header-right">
            <div class="version-info">版本 {version}</div>
            <div class="timestamp-info">生成时间: {timestamp}</div>
        </div>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <div class="filter-controls">
                <input type="text" class="search-box" placeholder="搜索测试套件..." onkeyup="filterSuites(this.value)">
                <div class="filter-buttons">
                    <span class="filter-button active" onclick="filterByStatus('all')">全部</span>
                    <span class="filter-button" onclick="filterByStatus('passed')">通过</span>
                    <span class="filter-button" onclick="filterByStatus('failed')">失败</span>
                </div>
            </div>
            
            <div class="summary">
                <div class="summary-card">
                    <h3>总测试数</h3>
                    <div class="value">{total_tests}</div>
                    <div class="label">个测试用例</div>
                </div>
                <div class="summary-card">
                    <h3>通过测试</h3>
                    <div class="value passed">{passed_tests}</div>
                    <div class="label">通过率 {success_rate:.1f}%</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {success_rate}%"></div>
                    </div>
                </div>
                <div class="summary-card">
                    <h3>失败测试</h3>
                    <div class="value failed">{failed_tests}</div>
                    <div class="label">需要修复</div>
                </div>
                <div class="summary-card">
                    <h3>总耗时</h3>
                    <div class="value">{total_time:.2f}</div>
                    <div class="label">毫秒</div>
                </div>
            </div>
            
            <div class="suite-list">
                {suite_list_html}
            </div>
        </div>
        
        <div class="content">
            <div id="test-detail-content">
                <div class="welcome-message">
                    <h3>选择左侧的测试套件</h3>
                    <p>点击左侧列表中的任意测试套件来查看详细信息</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 测试套件数据
        const suiteData = {test_suite_data_js};
        
        // 显示测试套件详情
        function showSuiteDetail(suiteName) {{
            // 更新活动状态
            document.querySelectorAll('.suite-item').forEach(item => {{
                item.classList.remove('active');
            }});
            document.querySelector(`[data-suite="${{suiteName}}"]`).classList.add('active');
            
            // 获取套件数据
            const suite = suiteData[suiteName];
            if (!suite) return;
            
            // 生成详情HTML
            const detailHtml = generateSuiteDetailHtml(suite);
            document.getElementById('test-detail-content').innerHTML = detailHtml;
        }}
        
        // 生成套件详情HTML
        function generateSuiteDetailHtml(suite) {{
            const successRate = suite.tests > 0 ? (suite.passed / suite.tests * 100) : 0;
            
            let testCasesHtml = '';
            suite.cases.forEach(testCase => {{
                const statusClass = testCase.passed ? 'passed' : 'failed';
                const statusText = testCase.passed ? '通过' : '失败';
                const statusIcon = testCase.passed ? '✓' : '✗';
                
                let errorHtml = '';
                if (!testCase.passed && testCase.error_message) {{
                    errorHtml = `<div class="error-details">${{testCase.error_message}}</div>`;
                }}
                
                const tagsHtml = testCase.tags.map(tag => `<span>${{tag}}</span>`).join(' ');
                const fileName = testCase.file ? testCase.file.split('/').pop() : '未知';
                
                testCasesHtml += `
                    <div class="test-case ${{statusClass}}">
                        <div class="test-name ${{statusClass}}">
                            <span class="status-icon ${{statusClass}}">${{statusIcon}}</span>
                            ${{testCase.name}}
                        </div>
                        <div class="test-info">
                            <span>状态: ${{statusText}}</span>
                            <span>耗时: ${{testCase.time.toFixed(2)}}ms</span>
                            <span>文件: ${{fileName}}</span>
                            <span>行号: ${{testCase.line}}</span>
                        </div>
                        ${{tagsHtml ? `<div class="test-info">${{tagsHtml}}</div>` : ''}}
                        ${{errorHtml}}
                    </div>
                `;
            }});
            
            return `
                <div class="test-detail">
                    <div class="detail-header">
                        <h2>${{suite.name}}</h2>
                        <div class="detail-stats">
                            <span>总数: ${{suite.tests}}</span>
                            <span class="passed">通过: ${{suite.passed}}</span>
                            <span class="failed">失败: ${{suite.failed}}</span>
                            <span>成功率: ${{successRate.toFixed(1)}}%</span>
                            <span>耗时: ${{suite.time.toFixed(2)}}ms</span>
                        </div>
                    </div>
                    <div class="test-cases">
                        ${{testCasesHtml}}
                    </div>
                </div>
            `;
        }}
        
        // 搜索过滤
        function filterSuites(searchTerm) {{
            const suiteItems = document.querySelectorAll('.suite-item');
            suiteItems.forEach(item => {{
                const suiteName = item.querySelector('.suite-name').textContent.toLowerCase();
                if (suiteName.includes(searchTerm.toLowerCase())) {{
                    item.style.display = 'block';
                }} else {{
                    item.style.display = 'none';
                }}
            }});
        }}
        
        // 状态过滤
        function filterByStatus(status) {{
            // 更新按钮状态
            document.querySelectorAll('.filter-button').forEach(btn => {{
                btn.classList.remove('active');
            }});
            event.target.classList.add('active');
            
            const suiteItems = document.querySelectorAll('.suite-item');
            suiteItems.forEach(item => {{
                const suiteName = item.getAttribute('data-suite');
                const suite = suiteData[suiteName];
                
                if (status === 'all') {{
                    item.style.display = 'block';
                }} else if (status === 'passed' && suite.failed === 0) {{
                    item.style.display = 'block';
                }} else if (status === 'failed' && suite.failed > 0) {{
                    item.style.display = 'block';
                }} else {{
                    item.style.display = 'none';
                }}
            }});
        }}
        
        // 默认选择第一个套件
        document.addEventListener('DOMContentLoaded', function() {{
            const firstSuite = document.querySelector('.suite-item');
            if (firstSuite) {{
                const suiteName = firstSuite.getAttribute('data-suite');
                showSuiteDetail(suiteName);
            }}
        }});
    </script>
</body>
</html>
"""

def clean_ansi_escape_sequences(text):
    """清理字符串中的ANSI转义序列"""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def parse_catch2_json(json_file):
    """解析 Catch2 JSON 格式的测试报告"""
    try:
        # 读取文件内容并清理ANSI转义序列
        with open(json_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 清理ANSI转义序列
        clean_content = clean_ansi_escape_sequences(content)
        
        # 解析清理后的JSON
        data = json.loads(clean_content)
        
        test_cases = []
        if 'test-run' in data and 'test-cases' in data['test-run']:
            for test_case in data['test-run']['test-cases']:
                test_info = test_case.get('test-info', {})
                runs = test_case.get('runs', [])
                
                # 获取测试基本信息
                name = test_info.get('name', '未知测试')
                source_location = test_info.get('source-location', {})
                file_name = source_location.get('filename', '')
                line_number = source_location.get('line', 0)
                tags = test_info.get('tags', [])
                
                # 计算测试结果和时间
                total_time = 0
                passed = True
                error_message = ""
                
                for run in runs:
                    if 'stats' in run:
                        stats = run['stats']
                        total_time += stats.get('duration-in-nanoseconds', 0) / 1000000.0  # 转换为毫秒
                        
                        # 检查是否有失败的断言
                        assertions = stats.get('assertions', {})
                        failed_count = assertions.get('failed', 0)
                        if failed_count > 0:
                            passed = False
                    
                    # 提取错误信息
                    if 'path' in run:
                        for path_item in run['path']:
                            if path_item.get('kind') == 'assertion' and not path_item.get('passed', True):
                                error_message += path_item.get('message', '') + "\\n"
                
                test_case_data = {
                    'name': name,
                    'passed': passed,
                    'time': total_time,
                    'file': file_name,
                    'line': line_number,
                    'tags': tags,
                    'error_message': error_message.strip()
                }
                
                test_cases.append(test_case_data)
        
        return test_cases
        
    except Exception as e:
        print(f"解析 JSON 文件 {json_file} 失败: {e}")
        return []

def generate_unified_html_report():
    """生成综合测试报告"""
    reports_dir = Path(TEST_REPORTS_DIR)
    
    if not reports_dir.exists():
        print(f"测试报告目录不存在: {{reports_dir}}")
        return False
    
    # 查找所有 JSON 测试报告文件
    json_files = list(reports_dir.glob("*-results.json"))
    
    if not json_files:
        print(f"在 {reports_dir} 中未找到任何 JSON 测试报告文件")
        return False
    
    print(f"找到 {len(json_files)} 个测试报告文件")
    
    # 汇总所有测试结果
    all_suites = []
    total_tests = 0
    total_passed = 0
    total_failed = 0
    total_time = 0.0
    
    for json_file in json_files:
        test_cases = parse_catch2_json(json_file)
        if not test_cases:
            continue
            
        suite_name = json_file.stem.replace('-results', '')
        suite_tests = len(test_cases)
        suite_passed = sum(1 for case in test_cases if case['passed'])
        suite_failed = suite_tests - suite_passed
        suite_time = sum(case['time'] for case in test_cases)
        
        all_suites.append({
            'name': suite_name,
            'tests': suite_tests,
            'passed': suite_passed,
            'failed': suite_failed,
            'time': suite_time,
            'cases': test_cases
        })
        
        total_tests += suite_tests
        total_passed += suite_passed
        total_failed += suite_failed
        total_time += suite_time
    
    if total_tests == 0:
        print("没有找到任何测试用例")
        return False
    
    success_rate = (total_passed / total_tests) * 100
    
    # 生成测试套件列表 HTML
    suite_list_html = ""
    suite_data_js = "{"
    
    for suite in all_suites:
        suite_success_rate = (suite['passed'] / suite['tests']) * 100 if suite['tests'] > 0 else 0
        status_class = "failed" if suite['failed'] > 0 else "passed"
        
        suite_list_html += f"""
            <div class="suite-item" data-suite="{suite['name']}" onclick="showSuiteDetail('{suite['name']}')">
                <div class="suite-name">{suite['name']}</div>
                <div class="suite-summary">
                    <span class="suite-badge badge-passed">{suite['passed']} 通过</span>
                    {f'<span class="suite-badge badge-failed">{suite["failed"]} 失败</span>' if suite['failed'] > 0 else ''}
                    <span>{suite_success_rate:.1f}%</span>
                </div>
            </div>
        """
        
        # 为JavaScript准备套件数据
        suite_data_js += f"""
            "{suite['name']}": {{
                "name": "{suite['name']}",
                "tests": {suite['tests']},
                "passed": {suite['passed']},
                "failed": {suite['failed']},
                "time": {suite['time']},
                "cases": ["""
        
        for i, case in enumerate(suite['cases']):
            if i > 0:
                suite_data_js += ","
            case_name_escaped = case['name'].replace('"', '\\"').replace('\\', '\\\\')
            error_msg_escaped = case['error_message'].replace('"', '\\"').replace('\\', '\\\\').replace('\n', '\\n')
            file_escaped = case['file'].replace('"', '\\"').replace('\\', '\\\\')
            
            suite_data_js += f"""
                    {{
                        "name": "{case_name_escaped}",
                        "passed": {"true" if case['passed'] else "false"},
                        "time": {case['time']},
                        "file": "{file_escaped}",
                        "line": {case['line']},
                        "tags": {json.dumps(case['tags'])},
                        "error_message": "{error_msg_escaped}"
                    }}"""
        
        suite_data_js += "]}"
        if suite != all_suites[-1]:  # 不是最后一个元素
            suite_data_js += ","
    
    suite_data_js += "}"
    
    # 填充模板
    html_content = HTML_TEMPLATE.format(
        project_name=PROJECT_NAME,
        version=PROJECT_VERSION if PROJECT_VERSION else "未知",
        timestamp=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        total_tests=total_tests,
        passed_tests=total_passed,
        failed_tests=total_failed,
        total_time=total_time,
        success_rate=success_rate,
        suite_list_html=suite_list_html,
        test_suite_data_js=suite_data_js
    )
    
    # 写入 HTML 文件
    html_file = reports_dir / f"{PROJECT_NAME}-comprehensive-test-report.html"
    try:
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"综合 HTML 测试报告已生成: {html_file}")
        print(f"总体统计: {total_passed}/{total_tests} 通过 ({success_rate:.1f}%)")
        print(f"测试套件数: {len(all_suites)}")
        return True
        
    except Exception as e:
        print(f"生成综合 HTML 报告失败: {e}")
        return False

if __name__ == "__main__":
    generate_unified_html_report()
